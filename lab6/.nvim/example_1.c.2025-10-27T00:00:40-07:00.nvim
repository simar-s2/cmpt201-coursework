nclude <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

#define ASSERT(expr)                                                           \
    {                                                                            \
          if (!(expr)) {                                                             \
                  fprintf(stderr, "Assertion failed: %s\n", #expr);                        \
                  exit(1);                                                                 \
                }                                                                          \
        }

#define TEST(expr)                                                             \
    {                                                                            \
          if (!(expr)) {                                                             \
                  fprintf(stderr, "Test failed: %s\n", #expr);                             \
                  exit(1);                                                                 \
                } else {                                                                   \
                        printf("Test passed: %s\n", #expr);                                      \
                      }                                                                          \
        }

typedef struct node {
    uint64_t data;
      struct node *next;
} node_t;

node_t *head = NULL;

void insert_sorted(uint64_t data) {
    node_t *new_node = malloc(sizeof(node_t));
      new_node->data = data;
        new_node->next = NULL;

          if (head == NULL) {
                head = new_node;
                  } else {
                        node_t *curr = head;
                            node_t *prev = NULL;

                                bool inserted = false;
                                    while (curr != NULL && !inserted) {
                                            if (data < curr->data) {
                                                      prev->next = new_node;
                                                              new_node->next = curr;
                                                                      inserted = true;
                                                                            }
                                                  prev = curr;
                                                        curr = curr->next;
                                                            }
                                      }
}
